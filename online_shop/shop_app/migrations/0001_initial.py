# Generated by Django 4.1.7 on 2023-05-02 21:31

from django.conf import settings
import django.contrib.auth.models
from django.db import migrations, models
import django.db.models.deletion
import shop_app.models
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Users',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('username', models.CharField(max_length=20, null=True, unique=True)),
                ('last_login', models.CharField(default='', max_length=40)),
                ('is_superuser', models.BooleanField(default=False)),
                ('email', models.CharField(max_length=40, unique=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=False)),
                ('date_joined', models.DateTimeField(default=shop_app.models.get_datetime)),
                ('first_name', models.CharField(help_text='First name', max_length=40)),
                ('surname', models.CharField(blank=True, help_text='Surname if you have', max_length=40, null=True)),
                ('last_name', models.CharField(help_text='Last name', max_length=40, validators=[shop_app.models.validate_lname])),
            ],
            options={
                'verbose_name': 'пользователь',
                'verbose_name_plural': 'Пользователи',
                'db_table': 'users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Categories',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.TextField()),
                ('supercategory', models.ForeignKey(blank=True, db_column='supercategory', null=True, on_delete=django.db.models.deletion.PROTECT, to='shop_app.categories')),
            ],
            options={
                'verbose_name_plural': 'Категории',
                'db_table': 'categories',
            },
        ),
        migrations.CreateModel(
            name='Orders',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('date', models.DateTimeField()),
                ('status', models.CharField(choices=[('canceled', 'canceled'), ('completed', 'completed'), ('created', 'created')], max_length=10)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Заказы',
                'db_table': 'orders',
            },
        ),
        migrations.CreateModel(
            name='Products',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=70)),
                ('weight', models.FloatField(blank=True, null=True, validators=[shop_app.models.get_positive])),
                ('description', models.TextField(blank=True, null=True)),
                ('composition', models.TextField(blank=True, null=True)),
                ('storage_conditions', models.CharField(blank=True, max_length=45, null=True)),
                ('number', models.IntegerField(validators=[shop_app.models.get_positive])),
                ('price', models.DecimalField(decimal_places=1, max_digits=10, validators=[shop_app.models.get_positive])),
                ('status', models.CharField(choices=[('for sale', 'for sale'), ('removed', 'removed')], max_length=70)),
                ('image', models.ImageField(upload_to='photos/%Y/')),
                ('category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='shop_app.categories')),
            ],
            options={
                'verbose_name': 'Продукт',
                'verbose_name_plural': 'Продукты',
                'db_table': 'products',
            },
        ),
        migrations.CreateModel(
            name='UserAddresses',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.TextField()),
                ('status', models.CharField(choices=[('active', 'active'), ('inactive', 'inactive')], max_length=40)),
            ],
            options={
                'verbose_name_plural': 'Адреса пользователей',
                'db_table': 'user_addresses',
            },
        ),
        migrations.CreateModel(
            name='UserToAddress',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('address', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='shop_app.useraddresses')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'user_to_address',
                'unique_together': {('user', 'address')},
            },
        ),
        migrations.CreateModel(
            name='Reviews',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('comment', models.TextField()),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='shop_app.products')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Комментарии',
                'db_table': 'reviews',
            },
        ),
        migrations.CreateModel(
            name='Discounts',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('date_of_creation', models.DateTimeField()),
                ('finished', models.DateTimeField()),
                ('percentage', models.IntegerField(validators=[shop_app.models.get_positive])),
                ('product', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='shop_app.products')),
            ],
            options={
                'verbose_name_plural': 'Скидки',
                'db_table': 'discounts',
            },
        ),
        migrations.AddField(
            model_name='users',
            name='addresses',
            field=models.ManyToManyField(through='shop_app.UserToAddress', to='shop_app.useraddresses'),
        ),
        migrations.AddField(
            model_name='users',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='users',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions'),
        ),
        migrations.CreateModel(
            name='OrdersToProducts',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.IntegerField(validators=[shop_app.models.get_positive])),
                ('order', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='shop_app.orders')),
                ('product', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='shop_app.products', verbose_name='Продукт')),
            ],
            options={
                'verbose_name': 'Компонент',
                'db_table': 'orders_to_products',
                'unique_together': {('order', 'product')},
            },
        ),
    ]
